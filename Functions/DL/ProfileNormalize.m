function P = ProfileNormalize(P, dispWarning)
%
% ProfileNormalize    Normalize dictionary in a profile for the Kernel RLS-DLA
%
%    Pin:                Input profile, before normalization
%    Pout:              Output profile, after normalization
%    dispWarning : Print warnings if true and warning is appropriate, (default: false)
%
% ex:
% Pn = ProfileNormalize(P0, true);
%
% Generated by Ghasem Alipoor (alipoor@hut.ac.ir) and Karl Skretting (karl.skretting@uis.no)
% Last modification: 13 June 2023
%

tooSmall = 0.0001;
tooLarge = 1/tooSmall;

if (nargin < 1)
    error('Must have at least 1 input argument, see help.');
end
if (nargin < 2)
    dispWarning = false;
end

S = sqrt(diag(P.Psi));   % column vector size Qx1
if min(S) < tooSmall
    if dispWarning
        fprintf('\nWARNING: %s min( S=sqrt(diag(P.Psi)) ) is very small.\n',mfilename());
    end
    S(S < tooSmall) = 1.0;
end
if max(S) > tooLarge
    if dispWarning
        fprintf('\nWARNING: %s max( S=sqrt(diag(P.Psi)) ) is very large.\n',mfilename());
    end
    S(S > tooLarge) = 1.0;
end
G = 1./S;                % Qx1
if strcmpi(P.KernelType, 'Lin')
    P.D = P.D .* repmat(G',P.N,1);   % =  * diag(G)  QxQ
end
P.W = repmat(S,1,P.L) .* P.W;       % diag(S) * ..     QxQ   D*W  is as before.
P.U = repmat(G,1,P.L) .* P.U;        % diag(G) * ..
P.C = (G*G') .* P.C;                       % diag(G) * C * diag(G)
P.Psi = (G*G') .* P.Psi;
end

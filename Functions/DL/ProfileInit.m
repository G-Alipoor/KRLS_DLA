function P = ProfileInit(X, varargin)
% ProfileInit     Initialize a profile for the Kernel RLS-DLA
%                 as simple as possible based on data X
%
% This function initialize the profile for a kernel dictionary
% based on the data in X, i.e. the kernel dictionary will be Phi(X)
% There should also be other functions: ProfileGrow(), ProfilePrune(..),
% ProfileNormalize(), ...
%
% use:
% Pout = ProfileInit(X, varargin)
%    Pout          returned profile, a struct with fields shown in ProfileShow().
%    X             New incoming update data (size: NxQ)
%                  IMPORTANT, here size Q in profile is given from X
%    varargin      Pairs of (name, value) for none/any/some/all of these
%      KernelType    Kernel type; a string. Options are 'Lin', 'Gauss' (Default) and 'Poly'
%      KernelParam   Kernel parameter; a scalar number (default: 2)
%      s             Sparsity, a scalar number (Default: 4)
%      Gamma         l2-regularization parameter in the dictionary learning cost function;
%                    when needed a regularization term is added to W, (usuful idea??)
%                    i.e. Wr = [W, sqrt(Gamma)*eye(Q)], Lambda_r = diag([P.lambda; ones(Q,1)]);
%                    and P.C = inv(Wr*Lambda_r*Wr') = inv(W*Lambda*W' + Gamma*eye(Q))
%      isNormalization:   A binary variable that specifies whether to normalize the dictionary
%                    perhaps better to have a function: Pout = ProfileNormalize(Pin);
%                    and let the algorithm decide when to normalize.
%
% ex:
% load dataXforAR1; XTrain = X;    % AR-1 test vectors
% XTrain = randn(50,400);
% P0 = ProfileInit(XTrain(:,1:30,1), 'KernelParam',4.0);    % Gauss kernel
% P0 = ProfileInit(XTrain(:,1:30,1), 'KernelType','Lin');
% ProfileShow(P0, true);
% 
% Generated by Ghasem Alipoor (alipoor@hut.ac.ir) and Karl Skretting (karl.skretting@uis.no)
% Last modification: 22 May 2022
% 

if (nargin < 1)
    error('Must have at least 1 input argument, see help.');
end
pnames = {'KernelType', 'KernelParam', 's', 'Gamma', 'isNormalization' };
dflts  = {     'Gauss',             2,   4,     0.0,                 0 };
[P.KernelType, P.KernelParam, P.s, P.Gamma, P.isNormalization] = ...
    getarg(varargin, pnames, dflts);

P.N = size(X,1);  % Signal size N, length data vectors in signal space
P.Q = size(X,2);  % Dictionary size Q, as all vectors in X here will be used for initial dictionary
P.L = P.Q;        % Profile size L, may grow larger later, i.e. ProfileGrow()
Q = P.Q;

P.X = X;                                         % NxL
P.W = eye(Q);                                    % QxL
P.lambda = ones(Q,1);                            % Qx1
P = ProfileAssert(P);   % and the other matrices as defined
P = ProfileNormalize(P);        % GA:
end

function varargout = getarg(pin,pnames,dflts)
% from Ghasem Alipoor, and in C:\Karl\Kernel_RLS_DLA\Codes_Ver 3\Functions
inlength = length(pin);
plength  = length(pnames);
if floor(inlength/2)~=inlength/2
    error('As input parameters are treated in pairs, their number should be even')
end

for m = 1:plength
    varargout(m) = dflts(m); %#ok<*AGROW>
    for n = 1:2:inlength
        if strcmpi(pnames{m},pin{n})
            varargout(m) = pin(n + 1);
        end
    end
end
end

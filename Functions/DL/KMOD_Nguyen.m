function [A, Psi, MSE] = KMOD_Nguyen(K, Q, s, Nit)

%
% KMOD_Nguyen
% Dictionary learning based on the Kernel Method of Optimal Directions (MOD)
%     algorithm, as proposed in:
%          H. Van Nguyen, V. M. Patel, N. M. Nasrabadi and R. Chellappa,
%          "Design of Non-Linear Kernel Dictionaries for Object Recognition,"
%          IEEE Transactions on Image Processing, vol. 22, no. 12, pp. 5123-5135,
%          Dec. 2013, doi: 10.1109/TIP.2013.2282078.
%
% Inputs:
%   K:   Gram matrix of the training samples in the feature space; K(i,j) = k(x_i,x_j)
%   Q:   Number of atoms/basis
%   s:    Sparsity, i.e. number of the non-zero elements in the representation
%   Nit: Number of iterations
% Outputs:
%   A:      Coefficients matrix representing the dictionary, i.e. D=Phi*A
%   MSE:  Mean Square Error in the feature space
%   Psi:     Gram matrix of the dictionary atoms, i.e. Psi=D'*D=A'*K*A
%
% Generated by Ghasem Alipoor (alipoor@hut.ac.ir) and Karl Skretting (karl.skretting@uis.no)
% Last modification: 15 April 2022
%

N = size(K,2);                     % Number of training sapmles

A = zeros(N,Q);                  % Initializing the dictionary coefficient matrix
Temp = randi(N,1,Q);
for q = 1:Q
    A(Temp(q),q) = 1;
end
if nargout > 2
    MSE = zeros(Nit,1);
end
for it = 1:Nit
    % Noramalizing the dictionary
    Psi = A'*K*A;
    A = A./(repmat(sqrt(diag(Psi)' + eps),size(A,1),1));

    % Sparse representation of the training samples, based on the not-updated dictionary
    W = KOMP_Nguyen( K , K , A, s );
    R = diag(K - K*A*W);
    if nargout > 2
        MSE(it) = sqrt(R'*R)/length(R);
    end

    % Updating the dictionary using Kernel MOD
    A = W'*pinv(W*W' + 1e-7*eye(size(W,1)));
    SmallAColumns = find(sum(abs(A)) < eps);
    A(:,SmallAColumns) = randn(size(A,1),length(SmallAColumns));
end
% Noramalizing the dictionary
Psi = A'*K*A;
A = A./(repmat(sqrt(diag(Psi)' + eps),size(A,1),1));
Psi = A'*K*A;

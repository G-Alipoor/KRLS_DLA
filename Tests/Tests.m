% All test results reported in the paper, can ne reproduced simply by running this code.
% 
% Generated by Ghasem Alipoor (alipoor@hut.ac.ir) and Karl Skretting (karl.skretting@uis.no)
% Last modification: 5 August 2022
%


clearvars
close all
clc

rng('default')

addpath(genpath('..\Functions'))

%% Test1: Noise Effect on the KRLS Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, 'LamFunc','Lin', 'Lambda0',.98, 'a_lambda',.8, ...
    'Gamma', 0.1,'GrowCriterion','Representation', 'GrowThresh',0.93, ...
    'BatchSize',10, 'maxL',200, 'newL',190, 'NMissing',10, 'NFolds',5, 'nofTests',20, ...
    'Comment',sprintf('Same batch size value is used in both growing and pruning steps.')};
KRLSTest('DataSet','USPS', 'nofBatches',150, 'verbose',1, Options{:});
KRLSTest('DataSet','ISOLET', 'nofBatches',60, 'verbose',1, Options{:});

%% Test2: Comparing With Other KDL Algorithms
f1 = figure('color', 'w'); clf;
grid on; hold on; title('USPS Dataset')
ylabel('Classification Accuracy', 'FontSize', 14)
xlabel('Number of Mini-Batches', 'FontSize', 14)
legend('FontSize', 14, 'Location','southeast')
f2 = figure('color', 'w'); clf;
grid on; hold on; title('ISOLET Dataset')
ylabel('Classification Accuracy', 'FontSize', 14)
xlabel('Number of Mini-Batches', 'FontSize', 14)
legend('FontSize', 14, 'Location','southeast')

testAfterBatch1 = 0;
testAfterBatch2 = 0;

AlgNames = {'KRLS'; 'OKDLRS'; 'OKDLFB'; 'sKDL'; 'KMOD'};
USPS_TrainTime = zeros(5, 1);
ISOLET_TrainTime = zeros(5, 1);
USPS_TestTime = zeros(5, 1);
ISOLET_TestTime = zeros(5, 1);

% KRLS Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, 'LamFunc','Lin', 'Lambda0',.98, 'a_lambda',.8, ...
    'Gamma', 0.1,'GrowCriterion','Representation', 'GrowThresh',0.93, ...
    'BatchSize',10, 'maxL',200, 'newL',190, 'NMissing',10, 'NFolds',5, 'nofTests',20, ...
    'Comment',sprintf('Same batch size value is used in both growing and pruning steps.')};
res = KRLSTest('DataSet','USPS', 'nofBatches',150, 'verbose',0, Options{:});
USPS_TrainTime(1) = (mean(res.ElapsedTime.Grow) + mean(res.ElapsedTime.Prune))/(150*10);   % 150 batches, 10 dictionaries (classes)
USPS_TestTime(1) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch1 = max(testAfterBatch1, res.Options.testAfterBatch);
figure(f1);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-o', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'KRLS')
res = KRLSTest('DataSet','ISOLET', 'nofBatches',60, 'verbose',0, Options{:});
ISOLET_TrainTime(1) = (mean(res.ElapsedTime.Grow) + mean(res.ElapsedTime.Prune))/(60*10);   % 60 batches, 10 dictionaries (classes)
ISOLET_TestTime(1) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch2 = max(testAfterBatch2, res.Options.testAfterBatch);
figure(f2);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-o', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'KRLS')

% OKDLRS Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, 'Rho',1.1, 'mu_m',0.2, ...
    'BatchSize',10, 'maxL',200, 'newL',190, 'NMissing',10, 'NFolds',5, 'nofTests',20, ...
    'Comment',sprintf('Same batch size value is used in both growing and pruning steps.')};
res = OKDLRSTest('DataSet','USPS', 'nofBatches',150, 'verbose',0, Options{:});
USPS_TrainTime(2) = mean(res.ElapsedTime.Train)/(150*10);   % 150 batches, 10 dictionaries (classes)
USPS_TestTime(2) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch1 = max(testAfterBatch1, res.Options.testAfterBatch);
figure(f1);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-*', 'MarkerSize',8, 'LineWidth', 2, 'DisplayName', 'OKDLRS')
res = OKDLRSTest('DataSet','ISOLET', 'nofBatches',60, 'verbose',0, Options{:});
ISOLET_TrainTime(2) = mean(res.ElapsedTime.Train)/(60*10);   % 60 batches, 10 dictionaries (classes)
ISOLET_TestTime(2) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch2 = max(testAfterBatch2, res.Options.testAfterBatch);
figure(f2);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-*', 'MarkerSize',8, 'LineWidth', 2, 'DisplayName', 'OKDLRS')

% OKDLFB Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, 'GrowingTrsh',0.9, 'lambda',0.05, 'mu',0.05, ...
    'BatchSize',10, 'maxL',200, 'newL',190, 'NMissing',10, 'NFolds',5, 'nofTests',20, ...
    'Comment',sprintf('Same batch size value is used in both growing and pruning steps.')};
res = OKDLFBTest('DataSet','USPS', 'nofBatches',150, 'verbose',0, Options{:});
USPS_TrainTime(3) = mean(res.ElapsedTime.Train)/(150*10);   % 150 batches, 10 dictionaries (classes)
USPS_TestTime(3) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch1 = max(testAfterBatch1, res.Options.testAfterBatch);
figure(f1);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-x', 'MarkerSize',8, 'LineWidth', 2, 'DisplayName', 'OKDLFB')
res = OKDLFBTest('DataSet','ISOLET', 'nofBatches',60, 'verbose',0, Options{:});
testAfterBatch2 = max(testAfterBatch2, res.Options.testAfterBatch);
ISOLET_TrainTime(3) = mean(res.ElapsedTime.Train)/(60*10);   % 60 batches, 10 dictionaries (classes)
ISOLET_TestTime(3) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
figure(f2);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-x', 'MarkerSize',8, 'LineWidth', 2, 'DisplayName', 'OKDLFB')

% sKDL Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, 'GrowingTrsh',0.9, ...
    'LearningRate_Rep',1e-13 ,'LearningRate_Dic',1e-5 ,'ISTA_Thrsh',0.01 ,'lam_Rep',0.005 ,'lam_Dic',0.001 ...
    'BatchSize',10, 'maxL',200, 'newL',190, 'NMissing',10, 'NFolds',5, 'nofTests',20, ...
    'Comment',sprintf('Same batch size value is used in both growing and pruning steps.')};
res = sKDLTest('DataSet','USPS', 'nofBatches',150, 'verbose',0, Options{:});
USPS_TrainTime(4) = mean(res.ElapsedTime.Train)/(150*10);   % 150 batches, 10 dictionaries (classes)
USPS_TestTime(4) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch1 = max(testAfterBatch1, res.Options.testAfterBatch);
figure(f1);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-s', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'sKDL')
res = sKDLTest('DataSet','ISOLET', 'nofBatches',60, 'verbose',0, Options{:});
ISOLET_TrainTime(4) = mean(res.ElapsedTime.Train)/(60*10);   % 60 batches, 10 dictionaries (classes)
ISOLET_TestTime(4) = mean(mean(res.ElapsedTime.Test))/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
testAfterBatch2 = max(testAfterBatch2, res.Options.testAfterBatch);
figure(f2);
plot([0 res.Options.testAfterBatch], squeeze(mean(res.Acc(:, 1, :), 3)), ...
    '-s', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'sKDL')

% KMOD Batch Algorithm
Options = {'KernelType','Poly', 'KernelParam',2.0, 'Q',30, 's', 5, ...
    'NIterations',100, 'NMissing',10, 'NFolds',5, 'Comment',''};
res = KMODTest('DataSet','USPS', 'verbose',0, Options{:});
USPS_TrainTime(5) = mean(res.ElapsedTime.Train)/(100*10);     % 100 iterations, 10 dictionaries (classes)
USPS_TestTime(5) = mean(res.ElapsedTime.Test)/(220*10*10);  % 10 Nmissing, 10 classes, 220 samples in each class
figure(f1);
plot([0 testAfterBatch1], repmat(squeeze(mean(res.Acc(1, :), 2)), length(testAfterBatch1) + 1, 1), ...
    '-d', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'KMOD')
res = KMODTest('DataSet','ISOLET', 'verbose',0, Options{:});
ISOLET_TrainTime(5) = mean(res.ElapsedTime.Train)/(100*10);   % 100 iterations, 10 dictionaries (classes)
ISOLET_TestTime(5) = mean(res.ElapsedTime.Test)/(60*10*10);  % 10 Nmissing, 10 classes, 60 samples in each class
figure(f2);
plot([0 testAfterBatch2], repmat(squeeze(mean(res.Acc(1, :), 2)), length(testAfterBatch2) + 1, 1), ...
    '-d', 'MarkerSize',6, 'LineWidth', 2, 'DisplayName', 'KMOD')

% Summary Training and Test Times
T = table(AlgNames, USPS_TrainTime, ISOLET_TrainTime, USPS_TestTime, ISOLET_TestTime) %#ok<NOPTS>

figure(f1);
ylabel('Classification Accuracy', 'FontSize', 14)
xlabel('Number of Mini-Batches', 'FontSize', 14)
legend('FontSize', 14, 'Location','southeast')
xticks(0:10:150);
figure(f2);
ylabel('Classification Accuracy', 'FontSize', 14)
xlabel('Number of Mini-Batches', 'FontSize', 14)
legend('FontSize', 14, 'Location','southeast')
xticks(0:10:60);

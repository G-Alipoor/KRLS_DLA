function res = KMODTest(varargin)

% This routine tests the batch KMOD dictionary learning algorithm, proposed
%     in the following paper, for kernel sparse representation classification.
%          H. Van Nguyen, V. M. Patel, N. M. Nasrabadi and R. Chellappa,
%          "Design of Non-Linear Kernel Dictionaries for Object Recognition,"
%          IEEE Transactions on Image Processing, vol. 22, no. 12, pp. 5123-5135,
%          Dec. 2013, doi: 10.1109/TIP.2013.2282078.
% 
% This algorithm is used in our paper to compare with the proposed KRLS-DLA algorithm.
% 
% Examples:
%   res = KMODTest('NMissing',4, 'NFolds',2);
%   res = KMODTest('NFolds',2, 'KernelType','Poly', 'KernelParam',2.0, 'NMissing',4);
%
% Generated by Ghasem Alipoor (alipoor@hut.ac.ir) and Karl Skretting (karl.skretting@uis.no)
% Last modification: 5 August 2022
%

%% Parameter setting
pnames = {'DataSet', ...  % Either USPS or ISOLET
    'KernelType', ...          % 'Gauss', 'Poly' or 'Lin'
    'KernelParam', ...        % 1.0
    'Q', ...                         % Number of dictionary atoms
    's', ...                          % Sparsity level, in training and test
    'NIterations', ...           % Number of iterations
    'NMissing', ...             % Number of states for mission indice ratios, was 10
    'NFolds', ...                 % Number of folds in kfold cross-validation
    'extraText', ...              % A short text used in file name
    'Comment', ...             % Any comment to be saved with the test result
    'verbose', ...                % 1 (default) to show warnings
    };
dflts = {'USPS', 'Poly', 2.0, 30, 5 , ...% DataSet, KernelType, KernelParam, Q, s
    100, 5, 5, '', '', 1, ... % NIterations, NMissing, NFolds, extraText, Comment, verbose
    };
[DataSet, KernelType, KernelParam, Q, s, NIterations, NMissing, NFolds, extraText, Comment, verbose] = ...
    getarg(varargin,pnames,dflts); %#ok<ASGLU>

% Test version; a string attached to the name of the saved file
TestVersion = sprintf('%s%iQ%is%im%i%s',KernelType,KernelParam,Q,s,NMissing,extraText);
resFileName = fullfile('..\Results\', sprintf('KMOD_%s_%s', DataSet, TestVersion));

Options = [];
if verbose
    fprintf('\n%s has been started using parameters: \n',mfilename())
    for i = 1:length(pnames)
        fprintf('  %20s : %s\n', pnames{i}, string(eval(pnames{i})));
        Options = setfield(Options,string(pnames{i}),eval(pnames{i})); %#ok<SFLD>
    end
    
    fprintf('This gives:\n');
    fprintf('  %20s : %s\n', 'TestVersion', TestVersion);
    fprintf('  %20s : %s.mat\n\n', 'resFileName', resFileName);
    % pause  % can be included to check parameters
else
    fprintf('\n%s has been started.\n',mfilename())
end

%% Loading data
switch DataSet
    case 'USPS'
        load('..\Data\USPS'); %#ok<LOAD>
        Data = double(data)/255;
    case 'ISOLET'
        A = readtable('D:\New Files\Corpora\ISOLET.csv');
        Data = zeros(617, 300, 26);
        for c = 1:26
            Temp = table2array(A(string(A.class) == sprintf("'%d'", c), 1:end-1))';
            if size(Temp, 2) < 300 % To account for missing entries
                Idx = randi(size(Temp, 2), 300 - size(Temp, 2), 1);
                Temp = cat(2, Temp, Temp(:, Idx));
            end
            Data(:, :, c) = Temp;
        end
end

%% Data parsing for train and test
NClass = size(Data, 3);                           % Number of classes
NSamples = size(Data, 2);                      % Number of data samples in each class
Ntest = floor(NSamples/NFolds);           % Number of test samples in each class
Ntrain = Ntest*(NFolds - 1);                   % Number of train samples in each class
NSamples = NFolds*Ntest;                    % Total number of sample, after rounding

Data = Data(:, 1:NSamples, :);                               % Rounding the numebr of data samples in all classes
CVO = cvpartition(NSamples, 'KFold', NFolds);     % Cross-Validation Object

%% Do Experiment or load results
if (exist([resFileName,'.mat'],'file') == 2)
    fprintf('\nLoad results from file instead of doing experiment once more.\n');
    if verbose
        fprintf('Change TestVersion (in the start of this m-file) to make a new test\n');
    end
    load([resFileName,'.mat']);  %#ok<LOAD> % load res
    field_names_list = fieldnames(res); %#ok<NODEF>
    for k = 1:length(field_names_list)
        field_name = field_names_list{k};
        % disp( [field_name, ' = res.', field_name, ';'] )
        eval([field_name, ' = res.',field_name,';']);
    end
else  % do the experiments
    Target = repmat((1:NClass)', 1, Ntest);
    Acc = zeros(NMissing, NFolds);
    
    ElapsedTime.Train = zeros(1, NFolds);
    ElapsedTime.Test = zeros(1, NFolds);
    for f = 1:NFolds
        fprintf('Fold %i (of %i)', f, NFolds)
        
        % Data parsing between Train and Test sets
        XTrain = zeros(size(Data, 1), Ntrain, NClass);
        XTest = zeros(size(Data,1), Ntest, NClass);
        for c = 1:NClass
            XTrain(:, :, c) = Data(:, CVO.training(f), c);
            XTest(:, :, c) = Data(:, CVO.test(f), c);
        end
        
        % Training
        tic
        K = cell(NClass, 1);
        A = cell(NClass, 1);
        for c = 1:NClass
            K{c} = ker_eval(XTrain(:, :, c), XTrain(:, :, c),KernelType,KernelParam);   % Kernel Gram matrix for the ith class
            A{c} = KMOD_Nguyen(K{c}, Q , s , NIterations);
        end
        ElapsedTime.Train(f) = ElapsedTime.Train(f) + toc;
        
        % Test
        tic
        for m = 1:NMissing
            Prd = zeros(NClass, Ntest);
            
            for i = 1:NClass
                CurrXTest = XTest(:, :, i);
                Sig = zeros(1, Ntest);
                for j = 1:Ntest
                    MissingIdx = randperm(size(CurrXTest, 1), round((m - 1)*.1*size(CurrXTest, 1)));
                    CurrXTest(MissingIdx, j) = 0;
                    % Energy of the current sample in the feature space
                    Sig(j) = ker_eval(CurrXTest(:, j), CurrXTest(:, j), KernelType, KernelParam);
                end
                
                Err = zeros(NClass, Ntest);
                for c = 1:NClass
                    % Representing the current sampke using the cth dictionary
                    k = ker_eval(XTrain(:, :, c), CurrXTest, KernelType, KernelParam);
                    
                    h = A{c}'*k;
                    %                 [~, Err(c, :)] = KOMP(A{c}'*K{c}*A{c}, h, Sig, s, eps, 0);
                    [~, r2] = myKOMP(A{c}'*K{c}*A{c}, h, Sig, s, 1e-6, false, false);
                    Err(c, :) = r2(:)';
                end
                
                [~,Prd(i, :)] = min(Err);
            end
            
            Acc(m, f) = nnz(Target == Prd)/numel(Target);
            fprintf('\t\t\t\t Missing Pixels = %2.0f%%,   Accuracy = %4.2f%%\n', ...
                100*(m - 1)*.1, 100*Acc(m, f))
        end
        ElapsedTime.Test(f) = ElapsedTime.Test(f) + toc;
    end
    res = struct('Acc', Acc, 'ElapsedTime', ElapsedTime, 'Options', Options);
    save(fullfile('..\Results\', sprintf('KMOD_%s_%sKernel_%s', DataSet, KernelType, TestVersion)), 'res')
end

if verbose
    figure('color', 'w');   clf;
    plot(.1*(0:NMissing - 1), mean(Acc, 2), 'c--d', 'LineWidth', 4); grid on
    ylabel('Classification Accuracy', 'FontSize', 20)
    xlabel('Fraction of Missing Pixels', 'FontSize', 20)
    title('KMOD', 'FontSize', 20)
end
